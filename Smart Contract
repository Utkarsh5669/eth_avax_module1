// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleBank {
    address public owner;
    mapping(address => uint256) private balances;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    // Function to deposit Ether into the contract
    function deposit() public payable 
    {
        require(msg.value > 0, "Deposit value must be greater than zero");
        balances[msg.sender] += msg.value;
    }

    // Function to withdraw Ether from the contract
    function withdraw(uint256 amount) public onlyOwner 
    {
        require(amount <= address(this).balance, "Insufficient contract balance");
        payable(owner).transfer(amount);
    }

    // Function to check the balance of the caller
    function checkBalance() public view returns (uint256)
    {
        return balances[msg.sender];
    }

    // Function to transfer funds from the caller's account to another account
    function transfer(address recipient, uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
    }

    // Function to trigger a manual error using revert
    function triggerError() public pure {
        revert("This is a manually triggered error");
    }
}
