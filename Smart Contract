// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Voting {
    struct Proposal {
        string description;
        uint voteCount;
    }

    address public chairperson;
    mapping(address => bool) public voters;
    Proposal[] public proposals;

    event Voted(address voter, uint proposal);

    modifier onlyChairperson() {
        require(msg.sender == chairperson, "Only chairperson can call this function.");
        _;
    }

    modifier onlyRegisteredVoter() {
        require(voters[msg.sender], "Only registered voters can vote.");
        _;
    }

    constructor(string[] memory proposalNames) {
        chairperson = msg.sender;
        voters[chairperson] = true;

        for (uint i = 0; i < proposalNames.length; i++) {
            proposals.push(Proposal({
                description: proposalNames[i],
                voteCount: 0
            }));
        }
    }

    function registerVoter(address voter) public onlyChairperson {
        require(!voters[voter], "Voter is already registered.");
        voters[voter] = true;
    }

    function vote(uint proposal) public onlyRegisteredVoter {
        require(proposal < proposals.length, "Invalid proposal.");

        proposals[proposal].voteCount += 1;
        emit Voted(msg.sender, proposal);
    }

    function getProposal(uint index) public view returns (string memory description, uint voteCount) {
        require(index < proposals.length, "Invalid proposal index.");

        Proposal storage proposal = proposals[index];
        return (proposal.description, proposal.voteCount);
    }

    function assertTest() public view {
        assert(voters[chairperson] == true); // Just an example of using assert
    }

    function revertTest(bool triggerRevert) public pure {
        if (triggerRevert) {
            revert("Triggered revert.");
        }
    }
}
